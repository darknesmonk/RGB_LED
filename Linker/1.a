;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 30.08.2015
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega8
;Program type            : Application
;AVR Core Clock frequency: 2,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;#define L PORTD
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <sleep.h>
;#define ALL 2
;flash unsigned char pp[] = {
;0x88,0x31,0x26,0x21,0xC6,0x39,0x86,0x31,0x86,0x31,0x86,0x31,0x86,0x31,0xE7,0x39,0x4,0x42,0xE4,0x39,0x5,0x21,0x25,0x21,0x25,0x21,0x25,0x21,0x25,0x21,0x45,0x29,0x44,0xAD,0xE4,0x7B,0x6,0x0,0x6,0x0,0x6,0x0,0x6,0x0,0x6,0x0,0xC6,0x18,0x64,0x94,0xA1,0xD6,0x2,0xA5,0x62,0xAD,0x62,0xAD,0x62,0xAD,0x62,0xAD,0x25,0x84,0x4,0x84,0xE0,0xFF,0xE0,0xFF,0xE0,0xFF,0xE0,0xFF,0xE0,0xFF,0xE0,0xFF,0x44,0xCE,0x44,0xAD,0x3,0xA5,0x86,0x8,0x85,0x31,0x85,0x31,0x85,0x31,0xA5,0x31,0xE7,0x39,0xA5,0x73,0xC4,0x5A,0x5,0x0,0xA5,0x10,0xA5,0x10,0xA5,0x10,0xA5,0x10,0x46,0x29,0xE6,0x20,0xA5,0x18,0x64,0x29,0x45,0x29,0x45,0x29,0x45,0x29,0x5,0x29,0x46,0x31,0xC6,0x31,0xC5,0x28,0x45,0x28,0x65,0x28,0x65,0x28,0x45,0x28,0xC5,0x28,0xA6,0x31,0x84,0x2C,0xA3,0x24,0xA5,0x29,0x64,0x2A,0x64,0x2A,0xC5,0x29,0xE3,0x23,0x64,0x2D,0x64,0x2C,0xE0,0x17,0xE0,0x17,0xE0,0x17,0xE0,0x17,0xE0,0x17,0xE0,0x17,0x63,0x26,0xC4,0x34,0xA1,0x1E,0x82,0x24,0x2,0x1D,0x2,0x1D,0xA2,0x24,0x1,0x1E,0x43,0x2E,0x86,0x32,0x65,0x29,0x6,0x28,0x6,0x28,0x6,0x28,0x6,0x28,0xC5,0x28,0xC6,0x32,0x7,0x31,0xC2,0x28,0x80,0x29,0x43,0x29,0x43,0x29,0x60,0x29,0x1,0x29,0xE6,0x30,0xA2,0x39,0x47,0x29,0xC,0x19,0x45,0x29,0x44,0x29,0xC,0x19,0x2A,0x21,0xA3,0x39,0xA9,0x31,0xDE,0x8,0x9F,0x0,0xFB,0x8,0xF9,0x8,0x9F,0x0,0xBF,0x0,0x8E,0x29,0x75,0x21,0xF6,0x10,0x26,0x29,0xF7,0x8,0xFB,0x8,0x46,0x29,0xF1,0x10,0x3B,0x19,0x73,0x21,0x50,0x21,0xA0,0x41,0x31,0x19,0x35,0x11,0xA0,0x41,0x2B,0x21,0x57,0x19,0x72,0x21,0xBF,0x0,0xFF,0x0,0xBF,0x0,0xBF,0x0,0xDF,0x0,0xBF,0x0,0x3A,0x19,0x8B,0x29,0x13,0x11,0xF5,0x10,0x13,0x11,0x13,0x11,0xF5,0x10,0xF4,0x10,0x6F,0x29,0xA4,0x31,0x60,0x31,0x60,0x31,0x60,0x31,0x60,0x31,0x60,0x31,0x60,0x31,0xA3,0x39,0x86,0x31,0x45,0x29,0x45,0x29,0x45,0x29,0x45,0x29,0x45,0x29,0x45,0x29,0x86,0x31,0x86,0x31,0x45,0x29,0x45,0x29,0x45,0x29,0x45,0x29,0x45,0x29,0x45,0x29,0x86,0x31,0x86,0x31,0x45,0x29,0x45,0x29,0x45,0x29,0x45,0x29,0x45,0x29,0x45,0x29,0x86,0x31,0x86,0x31,0x45,0x29,0x45,0x29,0x45,0x29,0x45,0x29,0x45,0x29,0x45,0x29,0x86,0x31,0x86,0x31,0x45,0x29,0x45,0x29,0x45,0x29,0x45,0x29,0x45,0x29,0x45,0x29,0x86,0x31,0x86,0x39,0x45,0x11,0x86,0x1,0x45,0x11,0x45,0x19,0x86,0x1,0x65,0x1,0x86,0x31,0xE7,0x9,0x24,0x51,0x82,0xA0,0x24,0x41,0x45,0x29,0x82,0x98,0xC3,0x78,0xC7,0x11,0xA6,0x49,0x41,0xF0,0x0,0xF8,0x61,0xD0,0x61,0xC8,0x0,0xF8,0x0,0xF8,0x65,0x71,0xE3,0xB0,0xA2,0x98,0xA6,0x1,0x82,0xA0,0x0,0xF8,0x24,0x49,0xE3,0x50,0xC3,0xD8,0x4,0xA9,0xA2,0xA0,0x65,0x39,0x0,0xF8,0x41,0xE0,0x65,0x39,0xA2,0x78,0xC3,0xD8,0xA6,0x49,0x20,0xF8,0x0,0xF8,0x41,0xE0,0x61,0xC8,0x0,0xF8,0x0,0xF8,0x65,0x79,0x65,0x1,0x24,0x49,0xC3,0x80,0x45,0x39,0x45,0x29,0xC3,0x80,0xE3,0x68,0x65,0x9,0xE7,0x41,0xA6,0x19,0xC7,0x11,0xA6,0x21,0xA6,0x29,0xC7,0x11,0xC7,0x11,0xE7,0x39
;};
;  volatile unsigned char count=0,step=0,sr=0;
;  unsigned char rgb[38][3][8] = {0};
;  eeprom unsigned char type;
;
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 0025 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0026 // Place your code here
; 0000 0027 
; 0000 0028 
; 0000 0029 }
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;
;// Timer2 overflow interrupt service routine
;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
; 0000 002D {
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 002E 
; 0000 002F     #asm("cli")
;PCODE: $00000014 VOL: 0
	cli
;PCODE: $00000015 VOL: 0
; 0000 0030 
; 0000 0031         if(count>8) count=0;
;PCODE: $00000016 VOL: 1
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 1
; 0000 0032     OCR2=rgb[step][0][count];      //RED
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 1
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 1
;PCODE: $00000021 VOL: 1
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0033     OCR1A=rgb[step][1][count];     // GREEN
;PCODE: $00000026 VOL: 1
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 1
;PCODE: $0000002C VOL: 1
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0034     OCR1B=rgb[step][2][count];     //BLUE
;PCODE: $00000032 VOL: 1
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 1
;PCODE: $00000038 VOL: 1
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0035        #asm("sei")
;PCODE: $0000003E VOL: 0
	sei
;PCODE: $0000003F VOL: 0
; 0000 0036               L = (1<<count++);
;PCODE: $00000040 VOL: 1
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 1
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0037 }
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 003A {
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 003B  TCNT0=150;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 003C step=(step>=sr)?0:(step+1);
;PCODE: $0000004E VOL: 1
;PCODE: $0000004F VOL: 1
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 1
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 1
; 0000 003D 
; 0000 003E }
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;
;// Declare your global variables here
;void sleep()
; 0000 0042 {
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0043 //unsigned char x;
; 0000 0044 //x = (MCUCR & ~(1 << BODSE)) | (1 << BODS); // подготовка бит
; 0000 0045 //MCUCR = x | (1 << BODSE); // процедура отключения BOD
; 0000 0046 //MCUCR = x;
; 0000 0047 MCUCR=0x00;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0048 #asm("cli");
;PCODE: $00000062 VOL: 0
	cli
;PCODE: $00000063 VOL: 0
; 0000 0049  sleep_enable();
;PCODE: $00000064 VOL: 0
; 0000 004A  powerdown();
;PCODE: $00000065 VOL: 0
; 0000 004B }
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;void conv(flash unsigned char *pic,unsigned int so )
; 0000 004D {
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 004E unsigned int ii=0,c;
; 0000 004F unsigned char i,j;
; 0000 0050 register unsigned char r=0,g=0,b=0;
; 0000 0051 sr=so/16;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;	*pic -> Y+11
;	so -> Y+9
;	ii -> R16,R17
;	c -> R18,R19
;	i -> R21
;	j -> R20
;	r -> Y+8
;	g -> Y+7
;	b -> Y+6
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 1
; 0000 0052 
; 0000 0053 for (j=0;j<=sr; j++)
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 1
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0054 {
; 0000 0055 for(i=0; i<8 ; i++)
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 0056 {   if(ii>=so) ii=0;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 0057  c=pic[ii++]|(pic[ii++]<<8);
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 0058 
; 0000 0059  r=(0xF800 & c)>>11;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 005A  g=(0x07E0 & c) >>5;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 005B  b=(0x001F & c);
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 005C 
; 0000 005D  rgb[j][0][i] =(float)r/31 * 80;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 005E  rgb[j][1][i] =(float)g/63  * 80;
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 005F  rgb[j][2][i] = (float)b/31 * 80;
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 0060 
; 0000 0061 }
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 0062 }
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 0063 }
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;void main(void)
; 0000 0065 {
;PCODE: $000000F2 VOL: 0
; 0000 0066 unsigned char i=0;
; 0000 0067     #asm("cli")
;	i -> R17
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
	cli
;PCODE: $000000F6 VOL: 0
; 0000 0068 // Declare your local variables here
; 0000 0069 
; 0000 006A // Input/Output Ports initialization
; 0000 006B // Port B initialization
; 0000 006C // Func7=In Func6=In Func5=In Func4=In Func3=Out Func2=Out Func1=Out Func0=In
; 0000 006D // State7=T State6=T State5=T State4=T State3=0 State2=0 State1=0 State0=T
; 0000 006E PORTB=0x00;
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 006F DDRB=0x0E;
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 0070 
; 0000 0071 // Port C initialization
; 0000 0072 // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0073 // State6=P State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0074 PORTC=0x40;
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 0075 DDRC=0x00;
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 0076 
; 0000 0077 // Port D initialization
; 0000 0078 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 0079 // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 007A PORTD=0x00;
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 007B DDRD=0xFF;
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 007C 
; 0000 007D 
; 0000 007E 
; 0000 007F 
; 0000 0080 // Timer/Counter 0 initialization
; 0000 0081 // Clock source: System Clock
; 0000 0082 // Clock value: 250,000 kHz
; 0000 0083 TCCR0=0x03;
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 0084 TCNT0=150;
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 0085 
; 0000 0086 // Timer/Counter 1 initialization
; 0000 0087 // Clock source: System Clock
; 0000 0088 // Clock value: 2000,000 kHz
; 0000 0089 // Mode: Fast PWM top=0x00FF
; 0000 008A // OC1A output: Non-Inv.
; 0000 008B // OC1B output: Non-Inv.
; 0000 008C // Noise Canceler: Off
; 0000 008D // Input Capture on Falling Edge
; 0000 008E // Timer1 Overflow Interrupt: Off
; 0000 008F // Input Capture Interrupt: Off
; 0000 0090 // Compare A Match Interrupt: Off
; 0000 0091 // Compare B Match Interrupt: Off
; 0000 0092 TCCR1A=0xF1;
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 0093 //TCCR1B=0x09;
; 0000 0094 TCCR1B=0x01;
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 0095 TCNT1H=0x00;
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 0096 TCNT1L=0x00;
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 0097 ICR1H=0x00;
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 0098 ICR1L=0x00;
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 0099 OCR1AH=0x00;
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 009A OCR1AL=0x00;
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 009B OCR1BH=0x00;
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 009C OCR1BL=0x00;
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 009D 
; 0000 009E // Timer/Counter 2 initialization
; 0000 009F // Clock source: System Clock
; 0000 00A0 // Clock value: 2000,000 kHz
; 0000 00A1 // Mode: Fast PWM top=0xFF
; 0000 00A2 // OC2 output: Non-Inverted PWM
; 0000 00A3 ASSR=0x00;
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 00A4 //TCCR2=0x79;
; 0000 00A5  TCCR2=0x71;
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 00A6 TCNT2=0x00;
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 00A7 OCR2=0x00;
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 00A8 
; 0000 00A9 // External Interrupt(s) initialization
; 0000 00AA // INT0: Off
; 0000 00AB // INT1: Off
; 0000 00AC MCUCR=0x00;
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 00AD 
; 0000 00AE // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00AF TIMSK=0x45;
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 00B0 
; 0000 00B1 // USART initialization
; 0000 00B2 // USART disabled
; 0000 00B3 UCSRB=0x00;
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 00B4 
; 0000 00B5 // Analog Comparator initialization
; 0000 00B6 // Analog Comparator: Off
; 0000 00B7 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00B8 ACSR=0x80;
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 00B9 SFIOR=0x00;
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 00BA 
; 0000 00BB // ADC initialization
; 0000 00BC // ADC disabled
; 0000 00BD ADCSRA=0x00;
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 00BE 
; 0000 00BF // SPI initialization
; 0000 00C0 // SPI disabled
; 0000 00C1 SPCR=0x00;
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 00C2 
; 0000 00C3 // TWI initialization
; 0000 00C4 // TWI disabled
; 0000 00C5 TWCR=0x00;
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 00C6 
; 0000 00C7 // Global enable interrupts
; 0000 00C8 
; 0000 00C9 if ((MCUCSR & 1)) { MCUCSR=0;
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 00CA 
; 0000 00CB    OCR2=100;
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 00CC  for (i=0; i<8; i++) {  L   =1<<i; delay_ms(100);} OCR2=OCR1A=OCR1B=0;
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 00CD 
; 0000 00CE   OCR1A=100;
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 00CF  for (i=0; i<8; i++) {  L   =1<<i;  delay_ms(100); } OCR2=OCR1A=OCR1B=0;
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 00D0 
; 0000 00D1   OCR1B=100;
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 00D2  for (i=0; i<8; i++) {  L   =1<<i;  delay_ms(100); }   OCR2=OCR1A=OCR1B=0;
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 00D3   L=0;
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 00D4   type=0;
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0000 00D5 sleep();}
;PCODE: $0000018F VOL: 0
; 0000 00D6 
; 0000 00D7 
; 0000 00D8 if ((MCUCSR & 2))
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0000 00D9 {
; 0000 00DA type=(type>ALL)?1:(type+1);
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 00DB MCUCSR=0; if(type>=ALL) {  type=0; sleep(); }
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0000 00DC }
;PCODE: $000001AE VOL: 0
; 0000 00DD 
; 0000 00DE 
; 0000 00DF 
; 0000 00E0   conv(pp,sizeof(pp));
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0000 00E1 
; 0000 00E2  #asm("sei")
;PCODE: $000001B5 VOL: 0
	sei
;PCODE: $000001B6 VOL: 0
; 0000 00E3   while(1){     }
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
; 0000 00E4 
; 0000 00E5 
; 0000 00E6 }
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
